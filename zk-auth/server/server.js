require('dotenv').config();

const express = require('express');
const mongoose = require('mongoose');
const snarkjs = require('snarkjs');
const path = require('path');
const bodyParser = require('body-parser');
const { buildPoseidon } = require('circomlibjs');

const app = express();
const port = 3000;

// Initialize Poseidon
let poseidon;
(async () => {
    poseidon = await buildPoseidon();
})();

// Middleware
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, '..', 'views')); // Adjust path for server/ subdirectory
app.use(express.static(path.join(__dirname, '..', 'public')));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// MongoDB Atlas Connection to 'test' database
mongoose.connect(process.env.DB_URI + '&authSource=admin', { dbName: 'test' })
    .then(() => console.log('Connected to MongoDB Atlas (test database)'))
    .catch(err => console.error('MongoDB connection error:', err));

const UserSchema = new mongoose.Schema({
    _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Auto-generated by MongoDB
    username: { type: String, unique: true, required: true },
    hash: { type: String, required: true } // Renamed to match circuit's public input
});
const User = mongoose.model('users', UserSchema); // Collection name 'users'

// Routes
app.get('/', (req, res) => {
    res.render('index'); // Render index.ejs as the default home page
});

app.get('/login', (req, res) => {
    res.render('login', { error: null });
});

app.get('/register', (req, res) => {
    res.render('register', { error: null });
});

app.post('/register', async (req, res) => {
    const { username, password } = req.body;
    try {
        // Check if username already exists
        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.render('register', { error: 'Username already exists.' });
        }

        // Ensure Poseidon is initialized
        if (!poseidon) {
            throw new Error('Poseidon not initialized');
        }

        // Convert password to numeric type and hash with Poseidon
        const numericPassword = BigInt(Buffer.from(password).toString('hex'), 16);
        const hash = poseidon.F.toString(poseidon([numericPassword]));

        const user = new User({ username, hash });
        await user.save();
        res.redirect('/login');
    } catch (error) {
        console.error('Registration Error:', error.message, error.stack);
        if (error.code === 11000) {
            res.render('register', { error: 'Username already exists.' });
        } else {
            res.render('register', { error: 'Registration failed due to an unexpected error.' });
        }
    }
});

app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    try {
        const user = await User.findOne({ username });
        if (!user) {
            return res.render('login', { error: 'User not found' });
        }

        // Ensure Poseidon is initialized
        if (!poseidon) {
            throw new Error('Poseidon not initialized');
        }

        // Convert login password to numeric type and hash with Poseidon
        const numericPassword = BigInt(Buffer.from(password).toString('hex'), 16);
        const computedHash = poseidon.F.toString(poseidon([numericPassword]));
        const storedHash = user.hash;

        const inputs = {
            password: numericPassword.toString(),
            hash: storedHash
        };
        const { proof, publicSignals } = await snarkjs.plonk.fullProve(
            inputs,
            path.join(__dirname, '..', 'circuits/build/auth_js/auth.wasm'),
            path.join(__dirname, '..', 'circuits/keys/auth_final.zkey')
        );
        const vKey = JSON.parse(require('fs').readFileSync(path.join(__dirname, '..', 'circuits/keys/verification_key.json')));
        const isValid = await snarkjs.plonk.verify(vKey, publicSignals, proof);
        if (isValid && publicSignals[0] == 1) { // Verify output
            res.render('home', { username }); // Render home.ejs after login
        } else {
            res.render('login', { error: 'Invalid credentials' });
        }
    } catch (error) {
        console.error('Login Error:', error.message, error.stack);
        res.render('login', { error: 'Login failed' });
    }
});

app.get('/home', (req, res) => {
    res.render('home', { username: 'Guest' }); // Direct access to home page
});

// Start server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});